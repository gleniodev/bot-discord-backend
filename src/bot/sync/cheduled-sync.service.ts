// src/bot/sync/scheduled-sync.service.ts
import { Injectable, Logger } from '@nestjs/common';
import { Cron } from '@nestjs/schedule';
import { SyncUsersService } from './sync-users.service';
import { BotService } from '../bot.service';

@Injectable()
export class ScheduledSyncService {
  private readonly logger = new Logger(ScheduledSyncService.name);

  constructor(
    private readonly syncUsersService: SyncUsersService,
    private readonly botService: BotService,
  ) {}

  // Sincroniza√ß√£o completa a cada 6 horas
  @Cron('0 */6 * * *', {
    name: 'sync-complete-users',
    timeZone: 'America/Sao_Paulo',
  })
  async sincronizacaoCompleta() {
    this.logger.log('üïê Iniciando sincroniza√ß√£o autom√°tica completa...');

    try {
      const client = this.botService.getClient();

      if (!client.isReady()) {
        this.logger.warn('‚ö†Ô∏è Bot n√£o est√° pronto para sincroniza√ß√£o');
        return;
      }

      await this.syncUsersService.sincronizarTodosUsuarios(client);

      const stats = await this.syncUsersService.gerarRelatorioSincronizacao();
      this.logger.log(
        `‚úÖ Sincroniza√ß√£o autom√°tica conclu√≠da: ${stats?.totalUsuarios} usu√°rios`,
      );
    } catch (error) {
      this.logger.error('‚ùå Erro na sincroniza√ß√£o autom√°tica:', error);
    }
  }

  // Sincroniza√ß√£o incremental a cada hora
  @Cron('0 * * * *', {
    name: 'sync-incremental',
    timeZone: 'America/Sao_Paulo',
  })
  async sincronizacaoIncremental() {
    this.logger.log('üîÑ Verificando atualiza√ß√µes incrementais...');

    try {
      const client = this.botService.getClient();

      if (!client.isReady()) {
        this.logger.warn(
          '‚ö†Ô∏è Bot n√£o est√° pronto para sincroniza√ß√£o incremental',
        );
        return;
      }

      // Aqui voc√™ pode implementar l√≥gica mais espec√≠fica para sync incremental
      // Por exemplo, apenas usu√°rios que entraram/sa√≠ram recentemente

      this.logger.log('‚úÖ Verifica√ß√£o incremental conclu√≠da');
    } catch (error) {
      this.logger.error('‚ùå Erro na sincroniza√ß√£o incremental:', error);
    }
  }

  // Limpeza de dados antigos toda segunda-feira √†s 3h
  @Cron('0 3 * * 1', {
    name: 'cleanup-old-data',
    timeZone: 'America/Sao_Paulo',
  })
  async limpezaDados() {
    this.logger.log('üßπ Iniciando limpeza de dados antigos...');

    try {
      // Implementar limpeza de logs antigos, backups, etc.
      this.logger.log('‚úÖ Limpeza de dados conclu√≠da');
    } catch (error) {
      this.logger.error('‚ùå Erro na limpeza de dados:', error);
    }
  }
}

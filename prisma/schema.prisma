// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model ItemAlias {
  id            Int    @id @default(autoincrement())
  nomeDetectado String @unique
  itemSlug      String @unique
  quantidadeMax Int? // null = sem limite; 0 = bloqueado; >0 = limite diário
  categoria     String @default("GERAL")
}

model ItemLog {
  id         String   @id @default(cuid())
  nickname   String
  fixo       String
  itemSlug   String
  quantidade Int
  acao       String
  cidade     String
  dataHora   DateTime @default(now())
}

model User {
  id       String  @id @default(cuid())
  userId   String  @unique
  nickname String
  patente  String?

  joinedServerAt   DateTime? // Data que entrou no servidor Discord
  createdAccountAt DateTime? // Data que criou a conta Discord
  lastSyncAt       DateTime  @default(now()) // Última sincronização
  premiumSince     DateTime? // Data do boost (se aplicável)

  cavalryRoleDate DateTime? // Data que recebeu o cargo de cavalaria
  lastOnDutyDate  DateTime? // Última entrada em on-duty

  isActive Boolean @default(true)
  roles    String[] @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  medals     Medal[]
  onDutyLogs OnDutyLog[]

  @@map("users")
}

model ExcessoItem {
  id                  Int       @id @default(autoincrement())
  nickname            String
  itemSlug            String
  quantidadeExcesso   Int
  quantidadeDevolvida Int?      @default(0)
  dataHoraRetirada    DateTime
  dataHoraDevolucao   DateTime?
  cidade              String
  status              String    @default("PENDENTE")
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@map("excesso_itens")
}

model ControleArmas {
  id                  Int       @id @default(autoincrement())
  nickname            String
  itemSlug            String
  quantidade          Int
  dataHoraRetirada    DateTime
  dataHoraDevolucao   DateTime?
  cidade              String
  patente             String
  statusArma          String    @default("SEM_PERMISSAO")
  motivoRetirada      String?
  superiOrAutorizador String?
  observacoes         String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@index([nickname])
  @@index([statusArma])
  @@index([dataHoraRetirada])
  @@index([itemSlug])
  @@index([patente])
  @@map("ControleArmas")
}

model Medal {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [userId])

  type        MedalType // TEMPO_SERVICO_I, TEMPO_SERVICO_II, TEMPO_SERVICO_III
  awardedAt   DateTime  @default(now())
  awardedBy   String? // UserId de quem concedeu
  bonusAmount Int // Valor da bonificação

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, type]) // Um usuário não pode ter a mesma medalha duas vezes
  @@map("medals")
}

model OnDutyLog {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [userId])

  actionType String // "ENTROU_EM_SERVICO", "SAIU_DE_SERVICO"
  timestamp  DateTime
  channelId  String? // Canal onde foi registrado
  messageId  String? // ID da mensagem original

  createdAt DateTime @default(now())

  @@map("on_duty_logs")
}

enum MedalType {
  TEMPO_SERVICO_I // 1 mês - $500
  TEMPO_SERVICO_II // 2 meses - $1000
  TEMPO_SERVICO_III // 3 meses - $1500

  @@map("medal_types")
}

// Remova completamente o model ItemLimit, pois a coluna quantidadeMax agora vive em ItemAlias.

import { Injectable, Logger } from '@nestjs/common';
import { EmbedBuilder } from 'discord.js';
import { TextChannel } from 'discord.js';
import { DateTime } from 'luxon';
import { PrismaService } from '../../../../prisma/prisma.service';
import { SyncUsersService } from '../../sync/sync-users.service';
import { BOT_CONFIG } from '../config/bot.config';

@Injectable()
export class NotificationService {
  private readonly logger = new Logger(NotificationService.name);

  private readonly alertChannelId = BOT_CONFIG.CHANNELS.ITEM_ALERT_CHANNEL_ID;
  private readonly weaponAlertChannelId =
    BOT_CONFIG.CHANNELS.WEAPON_ALERT_CHANNEL_ID;

  constructor(
    private readonly prisma: PrismaService,
    private readonly syncUsersService: SyncUsersService,
  ) {}

  async enviarAlertaCanal(
    client: any,
    nickname: string,
    item: string,
    totalRetirado: number,
    limite: number,
    dataHora: Date,
    city: string,
    transacaoId: number,
  ) {
    try {
      const alertChannel = client.channels.cache.get(
        this.alertChannelId,
      ) as TextChannel;

      if (!alertChannel) {
        this.logger.error(
          `‚ùå Canal de alerta n√£o encontrado: ${this.alertChannelId}`,
        );
        return;
      }

      if (!alertChannel.isTextBased()) {
        this.logger.error('‚ùå Canal de alerta n√£o √© baseado em texto');
        return;
      }

      const dataFormatada = DateTime.fromJSDate(dataHora).toFormat(
        'dd/LL/yyyy - HH:mm:ss',
      );

      const mensagem = new EmbedBuilder()
        .setTitle('üì¶ CONTROLE DO BA√ö')
        .setDescription('**LIMITE DE RETIRADA EXCEDIDO**')
        .addFields(
          {
            name: 'Autor:',
            value: nickname,
            inline: true,
          },
          {
            name: 'Item:',
            value: item,
            inline: true,
          },
          {
            name: 'Retirado:',
            value: `${totalRetirado} (limite: ${limite})`,
            inline: true,
          },
          {
            name: 'üìÖ Data:',
            value: dataFormatada,
            inline: false,
          },
          {
            name: 'üèòÔ∏è Cidade:',
            value: city,
            inline: false,
          },
          {
            name: 'üÜî ID da Transa√ß√£o:',
            value: `#${transacaoId}`,
            inline: false,
          },
        )
        .setColor(0xff4444); // Cor vermelha para alerta

      await alertChannel.send({ embeds: [mensagem] });
      this.logger.log('‚úÖ Alerta enviado para o canal');
    } catch (error) {
      this.logger.error('‚ùå Erro ao enviar alerta no canal:', error);
    }
  }

  async enviarAlertaItemBloqueado(
    client: any,
    nickname: string,
    item: string,
    quantidade: number,
    dataHora: Date,
    city: string,
    transacaoId: number,
  ) {
    try {
      const alertChannel = client.channels.cache.get(
        this.alertChannelId,
      ) as TextChannel;

      if (!alertChannel) {
        this.logger.error(
          `‚ùå Canal de alerta n√£o encontrado: ${this.alertChannelId}`,
        );
        return;
      }

      const dataFormatada = DateTime.fromJSDate(dataHora).toFormat(
        'dd/LL/yyyy - HH:mm:ss',
      );

      const mensagem = new EmbedBuilder()
        .setTitle('üö´ CONTROLE DO BA√ö')
        .setDescription('**ITEM BLOQUEADO PARA RETIRADA**')
        .addFields(
          {
            name: 'Autor:',
            value: nickname,
            inline: true,
          },
          {
            name: 'Item:',
            value: item,
            inline: true,
          },
          {
            name: 'Retirado:',
            value: `${quantidade}`,
            inline: true,
          },
          {
            name: 'üìÖ Data:',
            value: dataFormatada,
            inline: false,
          },
          {
            name: 'üèòÔ∏è Cidade:',
            value: city,
            inline: false,
          },
          {
            name: '‚ö†Ô∏è Status:',
            value: 'Este item est√° BLOQUEADO para retirada',
            inline: false,
          },
          {
            name: 'üÜî ID da Transa√ß√£o:',
            value: `#${transacaoId}`,
            inline: false,
          },
        )
        .setColor(0xff0000); // Cor vermelha mais forte para bloqueio

      await alertChannel.send({ embeds: [mensagem] });
      this.logger.log('‚úÖ Alerta de item bloqueado enviado para o canal');

      // Envia DM para o jogador sobre o item bloqueado
      await this.enviarDMItemBloqueado(
        client,
        nickname,
        item,
        quantidade,
        transacaoId,
      );
    } catch (error) {
      this.logger.error('‚ùå Erro ao enviar alerta de item bloqueado:', error);
    }
  }

  async enviarAlertaArmaSemPermissao(
    client: any,
    nickname: string,
    item: string,
    quantidade: number,
    dataHora: Date,
    city: string,
    transacaoId: number,
  ) {
    try {
      const alertChannel = client.channels.cache.get(
        this.weaponAlertChannelId,
      ) as TextChannel;

      if (!alertChannel) {
        this.logger.error(
          `‚ùå Canal de alerta de armas n√£o encontrado: ${this.weaponAlertChannelId}`,
        );
        return;
      }

      const dataFormatada = DateTime.fromJSDate(dataHora).toFormat(
        'dd/LL/yyyy - HH:mm:ss',
      );

      // Busca a patente do usu√°rio para mostrar no alerta
      const userData = await this.prisma.user.findFirst({
        where: {
          nickname: {
            contains: nickname,
            mode: 'insensitive',
          },
        },
        select: {
          patente: true,
        },
      });

      const patente = userData?.patente || 'N√£o identificada';

      const mensagem = new EmbedBuilder()
        .setTitle('üî´ CONTROLE DE ARMAS')
        .setDescription('**RETIRADA DE ARMA SEM PERMISS√ÉO**')
        .addFields(
          {
            name: 'Autor:',
            value: nickname,
            inline: true,
          },
          {
            name: 'Patente:',
            value: patente,
            inline: true,
          },
          {
            name: 'Arma:',
            value: item,
            inline: true,
          },
          {
            name: 'Quantidade:',
            value: `${quantidade}`,
            inline: true,
          },
          {
            name: 'üìÖ Data:',
            value: dataFormatada,
            inline: false,
          },
          {
            name: 'üèòÔ∏è Cidade:',
            value: city,
            inline: false,
          },
          {
            name: '‚ö†Ô∏è Status:',
            value: 'Patente SEM AUTORIZA√á√ÉO para retirar armas',
            inline: false,
          },
          {
            name: 'üÜî ID da Transa√ß√£o:',
            value: `#${transacaoId}`,
            inline: false,
          },
        )
        .setColor(0xdc143c); // Cor vermelha escura (crimson) para armas

      await alertChannel.send({ embeds: [mensagem] });
      this.logger.log('‚úÖ Alerta de arma sem permiss√£o enviado para o canal');

      // Envia DM para o jogador sobre a arma sem permiss√£o
      await this.enviarDMArmaSemPermissao(
        client,
        nickname,
        item,
        quantidade,
        transacaoId,
        patente,
      );
    } catch (error) {
      this.logger.error(
        '‚ùå Erro ao enviar alerta de arma sem permiss√£o:',
        error,
      );
    }
  }

  async enviarNotificacaoDevolucao(
    client: any,
    nickname: string,
    item: string,
    excessosAtualizados: any[],
    dataHora: Date,
    city: string,
  ) {
    try {
      const alertChannel = client.channels.cache.get(
        this.alertChannelId,
      ) as TextChannel;

      if (!alertChannel) {
        this.logger.error(
          `‚ùå Canal de alerta n√£o encontrado: ${this.alertChannelId}`,
        );
        return;
      }

      const dataFormatada = DateTime.fromJSDate(dataHora).toFormat(
        'dd/LL/yyyy - HH:mm:ss',
      );
      const totalDevolvido = excessosAtualizados.reduce(
        (sum, ex) => sum + ex.quantidadeDevolvida,
        0,
      );

      // Determina se h√° transa√ß√µes completamente devolvidas e pendentes
      const transacoesCompletas = excessosAtualizados.filter(
        (ex) => ex.novoStatus === 'DEVOLVIDO_TOTAL',
      );
      const transacoesParciais = excessosAtualizados.filter(
        (ex) => ex.novoStatus === 'DEVOLVIDO_PARCIAL',
      );

      let descricao = '**ITEM DEVOLVIDO**';
      let cor = 0x44ff44; // Verde

      if (transacoesCompletas.length > 0 && transacoesParciais.length === 0) {
        descricao = '**DEVOLU√á√ÉO COMPLETA ‚úÖ**';
        cor = 0x00ff00; // Verde mais forte
      } else if (transacoesParciais.length > 0) {
        descricao = '**DEVOLU√á√ÉO PARCIAL ‚ö†Ô∏è**';
        cor = 0xffaa00; // Laranja
      }

      // Detalhes das transa√ß√µes
      let detalhesTransacoes = '';
      excessosAtualizados.forEach((ex) => {
        const restante = ex.quantidadeExcesso - ex.novaQuantidadeDevolvida;
        detalhesTransacoes += `#${ex.id}: ${ex.quantidadeDevolvida} devolvidas`;

        if (ex.novoStatus === 'DEVOLVIDO_TOTAL') {
          detalhesTransacoes += ' ‚úÖ COMPLETA\n';
        } else {
          detalhesTransacoes += ` (restam ${restante}) ‚ö†Ô∏è\n`;
        }
      });

      const mensagem = new EmbedBuilder()
        .setTitle('üì¶ CONTROLE DO BA√ö')
        .setDescription(descricao)
        .addFields(
          {
            name: 'Autor:',
            value: nickname,
            inline: false,
          },
          {
            name: 'Item:',
            value: item,
            inline: true,
          },
          {
            name: 'Devolvido:',
            value: `${totalDevolvido}`,
            inline: true,
          },
          {
            name: 'üìÖ Data Devolu√ß√£o:',
            value: dataFormatada,
            inline: false,
          },
          {
            name: 'üèòÔ∏è Cidade:',
            value: city,
            inline: false,
          },
          {
            name: 'üÜî Status das Transa√ß√µes:',
            value: detalhesTransacoes.trim(),
            inline: false,
          },
        )
        .setColor(cor);

      await alertChannel.send({ embeds: [mensagem] });
      this.logger.log('‚úÖ Notifica√ß√£o de devolu√ß√£o enviada para o canal');
    } catch (error) {
      this.logger.error('‚ùå Erro ao enviar notifica√ß√£o de devolu√ß√£o:', error);
    }
  }

  async enviarNotificacaoDevolucaoArma(
    client: any,
    nickname: string,
    item: string,
    armasDevolvidas: any[],
    dataHora: Date,
    city: string,
  ) {
    try {
      const alertChannel = client.channels.cache.get(
        this.weaponAlertChannelId,
      ) as TextChannel;

      if (!alertChannel) {
        this.logger.error(
          `‚ùå Canal de alerta de armas n√£o encontrado: ${this.weaponAlertChannelId}`,
        );
        return;
      }

      const dataFormatada = DateTime.fromJSDate(dataHora).toFormat(
        'dd/LL/yyyy - HH:mm:ss',
      );
      const totalDevolvido = armasDevolvidas.reduce(
        (sum, arma) => sum + arma.quantidadeDevolvida,
        0,
      );

      const detalhesTransacoes = armasDevolvidas
        .map(
          (arma) =>
            `#${arma.id}: ${arma.quantidadeDevolvida} unidades ‚úÖ DEVOLVIDA`,
        )
        .join('\n');

      const mensagem = new EmbedBuilder()
        .setTitle('üî´ CONTROLE DE ARMAS')
        .setDescription('**ARMA DEVOLVIDA ‚úÖ**')
        .addFields(
          {
            name: 'Autor:',
            value: nickname,
            inline: false,
          },
          {
            name: 'Arma:',
            value: item,
            inline: true,
          },
          {
            name: 'Quantidade Devolvida:',
            value: `${totalDevolvido}`,
            inline: true,
          },
          {
            name: 'üìÖ Data Devolu√ß√£o:',
            value: dataFormatada,
            inline: false,
          },
          {
            name: 'üèòÔ∏è Cidade:',
            value: city,
            inline: false,
          },
          {
            name: 'üÜî Transa√ß√µes Finalizadas:',
            value: detalhesTransacoes,
            inline: false,
          },
        )
        .setColor(0x228b22); // Verde floresta para devolu√ß√£o de arma

      await alertChannel.send({ embeds: [mensagem] });
      this.logger.log(
        '‚úÖ Notifica√ß√£o de devolu√ß√£o de arma enviada para o canal',
      );
    } catch (error) {
      this.logger.error(
        '‚ùå Erro ao enviar notifica√ß√£o de devolu√ß√£o de arma:',
        error,
      );
    }
  }

  // M√©todos para DMs
  async enviarDMJogador(
    client: any,
    nickname: string,
    item: string,
    totalRetirado: number,
    limite: number,
    transacaoId: number,
  ) {
    try {
      // Busca userId pelo nickname usando LIKE (busca que cont√©m)
      const userId =
        await this.syncUsersService.buscarUserIdPorNicknameLike(nickname);

      if (!userId) {
        this.logger.warn(
          `‚ùå UserId n√£o encontrado para nickname que contenha: ${nickname}`,
        );
        return;
      }

      this.logger.log(`üîç UserId encontrado com busca LIKE: ${userId}`);
      await this.enviarDMParaUser(
        client,
        userId,
        nickname,
        item,
        totalRetirado,
        limite,
        transacaoId,
      );
    } catch (error) {
      this.logger.error(`‚ùå Erro ao enviar DM para ${nickname}:`, error);
    }
  }

  async enviarDMItemBloqueado(
    client: any,
    nickname: string,
    item: string,
    quantidade: number,
    transacaoId: number,
  ) {
    try {
      const userId =
        await this.syncUsersService.buscarUserIdPorNicknameLike(nickname);

      if (!userId) {
        this.logger.warn(
          `‚ùå UserId n√£o encontrado para item bloqueado: ${nickname}`,
        );
        return;
      }

      const user = await client.users.fetch(userId);
      if (!user) {
        this.logger.error(`‚ùå Usu√°rio n√£o encontrado no Discord: ${userId}`);
        return;
      }

      const mensagemDM =
        `üö´ **ITEM BLOQUEADO**\n\n` +
        `Voc√™ tentou retirar **${quantidade}x ${item}**, mas **voc√™ n√£o tem autoriza√ß√£o para retirar esse item**.\n\n` +
        `üÜî **ID da Transa√ß√£o:** #${transacaoId}\n\n` +
        `‚ùå **Devolva o item ao ba√∫ imediatamente, sob risco de puni√ß√£o**\n\n` +
        `Por favor, entre em contato com a corregedoria para mais informa√ß√µes ou para solicitar libera√ß√£o especial.`;

      await user.send(mensagemDM);
      this.logger.log(
        `‚úÖ DM de item bloqueado enviada para ${nickname} (${userId})`,
      );
    } catch (error) {
      this.logger.error(`‚ùå Erro ao enviar DM de item bloqueado:`, error);
    }
  }

  async enviarDMArmaSemPermissao(
    client: any,
    nickname: string,
    item: string,
    quantidade: number,
    transacaoId: number,
    patente: string,
  ) {
    try {
      const userId =
        await this.syncUsersService.buscarUserIdPorNicknameLike(nickname);

      if (!userId) {
        this.logger.warn(
          `‚ùå UserId n√£o encontrado para arma sem permiss√£o: ${nickname}`,
        );
        return;
      }

      const user = await client.users.fetch(userId);
      if (!user) {
        this.logger.error(`‚ùå Usu√°rio n√£o encontrado no Discord: ${userId}`);
        return;
      }

      const mensagemDM =
        `üî´ **ARMA SEM AUTORIZA√á√ÉO**\n\n` +
        `Voc√™ tentou retirar **${quantidade}x ${item}**, mas **sua patente n√£o tem autoriza√ß√£o para retirar armas**.\n\n` +
        `üëÆ **Sua patente:** ${patente}\n` +
        `üÜî **ID da Transa√ß√£o:** #${transacaoId}\n\n` +
        `‚ùå **Devolva a arma ao ba√∫ imediatamente, sob risco de puni√ß√£o**\n\n` +
        `Para solicitar autoriza√ß√£o, entre em contato com um superior hier√°rquico.`;

      await user.send(mensagemDM);
      this.logger.log(
        `‚úÖ DM de arma sem permiss√£o enviada para ${nickname} (${userId})`,
      );
    } catch (error) {
      this.logger.error(`‚ùå Erro ao enviar DM de arma sem permiss√£o:`, error);
    }
  }

  async enviarDMDevolucao(
    client: any,
    nickname: string,
    item: string,
    excessosAtualizados: any[],
  ) {
    try {
      // Busca userId pelo nickname usando LIKE
      const userId =
        await this.syncUsersService.buscarUserIdPorNicknameLike(nickname);

      if (!userId) {
        this.logger.warn(
          `‚ùå UserId n√£o encontrado para devolu√ß√£o: ${nickname}`,
        );
        return;
      }

      // Busca o usu√°rio no Discord
      const user = await client.users.fetch(userId);
      if (!user) {
        this.logger.error(`‚ùå Usu√°rio n√£o encontrado no Discord: ${userId}`);
        return;
      }

      const transacoesCompletas = excessosAtualizados.filter(
        (ex) => ex.novoStatus === 'DEVOLVIDO_TOTAL',
      );
      const transacoesParciais = excessosAtualizados.filter(
        (ex) => ex.novoStatus === 'DEVOLVIDO_PARCIAL',
      );

      let mensagemDM = '';

      if (transacoesCompletas.length > 0 && transacoesParciais.length === 0) {
        // Todas as transa√ß√µes foram completamente devolvidas
        const mensagensEngra√ßadas = [
          'Parab√©ns, oficial! Voc√™ conseguiu devolver tudo! üéâ Agora pode dormir tranquilo sem a consci√™ncia pesada! üò¥',
          'Uau! Devolu√ß√£o completa! üèÜ Voc√™ √© mais confi√°vel que um rel√≥gio su√≠√ßo! ‚è∞',
          'Excelente trabalho! üëè Todas as d√≠vidas quitadas! Pode ir ao ba√∫ novamente sem medo da corregedoria! üòé',
          'Perfeito! ‚ú® Voc√™ devolveu tudo certinho! At√© o xerife ficaria orgulhoso! ü§†',
          'Miss√£o cumprida, oficial! üéØ Devolu√ß√£o 100% completa! Agora voc√™ pode andar de cabe√ßa erguida pela cidade! üòÅ',
        ];

        const mensagemAleatoria =
          mensagensEngra√ßadas[
            Math.floor(Math.random() * mensagensEngra√ßadas.length)
          ];

        mensagemDM =
          `‚úÖ **DEVOLU√á√ÉO COMPLETA!**\n\n` +
          `Todas as suas transa√ß√µes de **${item}** foram quitadas com sucesso!\n\n` +
          `üìã **Transa√ß√µes finalizadas:**\n`;

        transacoesCompletas.forEach((ex) => {
          mensagemDM += `‚Ä¢ ID #${ex.id}: ${ex.quantidadeDevolvida} unidades ‚úÖ\n`;
        });

        mensagemDM += `\nüéä ${mensagemAleatoria}`;
      } else if (transacoesParciais.length > 0) {
        // H√° transa√ß√µes parcialmente devolvidas
        const totalDevolvido = excessosAtualizados.reduce(
          (sum, ex) => sum + ex.quantidadeDevolvida,
          0,
        );
        const totalRestante = excessosAtualizados.reduce(
          (sum, ex) =>
            sum + (ex.quantidadeExcesso - ex.novaQuantidadeDevolvida),
          0,
        );

        mensagemDM =
          `üì¶ **DEVOLU√á√ÉO PARCIAL REGISTRADA**\n\n` +
          `Obrigado por devolver **${totalDevolvido}x ${item}**!\n\n` +
          `üìã **Status das transa√ß√µes:**\n`;

        excessosAtualizados.forEach((ex) => {
          const restante = ex.quantidadeExcesso - ex.novaQuantidadeDevolvida;
          if (ex.novoStatus === 'DEVOLVIDO_TOTAL') {
            mensagemDM += `‚Ä¢ ID #${ex.id}: ${ex.quantidadeDevolvida} unidades ‚úÖ COMPLETA\n`;
          } else {
            mensagemDM += `‚Ä¢ ID #${ex.id}: ${ex.quantidadeDevolvida} devolvidas (restam ${restante}) ‚ö†Ô∏è\n`;
          }
        });

        mensagemDM +=
          `\n‚ö†Ô∏è **Ainda falta devolver: ${totalRestante}x ${item}**\n\n` +
          `Por favor, continue devolvendo quando poss√≠vel. A cada devolu√ß√£o voc√™ receber√° uma atualiza√ß√£o! üì¨`;

        // Se tem transa√ß√µes completas tamb√©m
        if (transacoesCompletas.length > 0) {
          mensagemDM += `\n\nüéâ Algumas transa√ß√µes foram completamente quitadas! Parab√©ns pelo progresso! üëç`;
        }
      }

      await user.send(mensagemDM);
      this.logger.log(
        `‚úÖ DM de devolu√ß√£o enviada para ${nickname} (${userId})`,
      );
    } catch (error) {
      this.logger.error(`‚ùå Erro ao enviar DM de devolu√ß√£o:`, error);
    }
  }

  async enviarDMDevolucaoArma(
    client: any,
    nickname: string,
    item: string,
    armasDevolvidas: any[],
  ) {
    try {
      const userId =
        await this.syncUsersService.buscarUserIdPorNicknameLike(nickname);

      if (!userId) {
        this.logger.warn(
          `‚ùå UserId n√£o encontrado para devolu√ß√£o de arma: ${nickname}`,
        );
        return;
      }

      const user = await client.users.fetch(userId);
      if (!user) {
        this.logger.error(`‚ùå Usu√°rio n√£o encontrado no Discord: ${userId}`);
        return;
      }

      const totalDevolvido = armasDevolvidas.reduce(
        (sum, arma) => sum + arma.quantidadeDevolvida,
        0,
      );

      const mensagensEngra√ßadas = [
        'Arma devolvida com sucesso! üéØ Agora voc√™ pode relaxar, a corregedoria n√£o est√° mais no seu encal√ßo! üòå',
        'Perfeito! üèÜ Arma devolvida! Voc√™ provou que √© um oficial respons√°vel! ü§†',
        'Excelente! ‚ú® Devolu√ß√£o completa! At√© o Marshal ficaria impressionado com sua honestidade! üéñÔ∏è',
        'Miss√£o cumprida, oficial! üéØ Arma devolvida com sucesso! Pode voltar ao trabalho tranquilo! üëÆ',
        '√ìtimo trabalho! üëè Devolu√ß√£o realizada! Sua ficha est√° limpa novamente! üìã‚úÖ',
      ];

      const mensagemAleatoria =
        mensagensEngra√ßadas[
          Math.floor(Math.random() * mensagensEngra√ßadas.length)
        ];

      let mensagemDM =
        `üî´ **ARMA DEVOLVIDA COM SUCESSO!**\n\n` +
        `Voc√™ devolveu **${totalDevolvido}x ${item}** com sucesso!\n\n` +
        `üìã **Transa√ß√µes finalizadas:**\n`;

      armasDevolvidas.forEach((arma) => {
        mensagemDM += `‚Ä¢ ID #${arma.id}: ${arma.quantidadeDevolvida} unidades ‚úÖ\n`;
      });

      mensagemDM += `\nüéä ${mensagemAleatoria}`;

      await user.send(mensagemDM);
      this.logger.log(
        `‚úÖ DM de devolu√ß√£o de arma enviada para ${nickname} (${userId})`,
      );
    } catch (error) {
      this.logger.error(`‚ùå Erro ao enviar DM de devolu√ß√£o de arma:`, error);
    }
  }

  private async enviarDMParaUser(
    client: any,
    userId: string,
    nickname: string,
    item: string,
    totalRetirado: number,
    limite: number,
    transacaoId: number,
  ) {
    try {
      // Busca o usu√°rio no Discord
      const user = await client.users.fetch(userId);
      if (!user) {
        this.logger.error(`‚ùå Usu√°rio n√£o encontrado no Discord: ${userId}`);
        return;
      }

      const excesso = totalRetirado - limite;

      // Envia DM
      const mensagemDM =
        `‚ö†Ô∏è **Limite Di√°rio Ultrapassado**\n\n` +
        `Voc√™ retirou **${totalRetirado}x ${item}** hoje.\n` +
        `O limite di√°rio √© de **${limite}** unidades.\n` +
        `**Excesso:** ${excesso} unidades\n\n` +
        `üÜî **ID da Transa√ß√£o:** #${transacaoId}\n\n` +
        `Por favor, devolva o excesso ou entre em contato com a corregedoria informando o ID da transa√ß√£o.\n` +
        `Quando devolver, ser√° enviada uma confirma√ß√£o autom√°tica com o status atualizado! üì¨`;

      await user.send(mensagemDM);
      this.logger.log(`‚úÖ DM enviada para ${nickname} (${userId})`);
    } catch (error) {
      this.logger.error(`‚ùå Erro ao enviar DM para userId ${userId}:`, error);

      // Log mais detalhado do erro
      if (error.code === 50007) {
        this.logger.warn(`‚ö†Ô∏è Usu√°rio ${nickname} n√£o aceita DMs de n√£o-amigos`);
      } else if (error.code === 10013) {
        this.logger.warn(`‚ö†Ô∏è Usu√°rio ${nickname} n√£o encontrado no Discord`);
      }
    }
  }
}

// src/bot/sync/sync-now.manual.ts
import { NestFactory } from '@nestjs/core';
import { AppModule } from '../../app.module';
import { BotService } from '../bot.service';
import { SyncUsersService } from './sync-users.service';
import { Logger } from '@nestjs/common';

async function runSync() {
  const logger = new Logger('ManualSync');

  try {
    logger.log('üöÄ Iniciando sincroniza√ß√£o manual...');

    // Criar a aplica√ß√£o NestJS
    const app = await NestFactory.createApplicationContext(AppModule, {
      logger: ['log', 'error', 'warn', 'debug', 'verbose'],
    });

    // Obter os servi√ßos necess√°rios
    const botService = app.get(BotService);
    const syncUsersService = app.get(SyncUsersService);

    logger.log('üì° Conectando bot Discord...');

    // Aguardar o bot ficar pronto
    const client = botService.getClient();

    if (!client.isReady()) {
      logger.log('‚è≥ Aguardando bot ficar pronto...');

      await new Promise<void>((resolve, reject) => {
        const timeout = setTimeout(() => {
          reject(new Error('Timeout aguardando bot ficar pronto'));
        }, 30000); // 30 segundos de timeout

        client.once('ready', () => {
          clearTimeout(timeout);
          logger.log('‚úÖ Bot est√° pronto!');
          resolve();
        });

        client.once('error', (error) => {
          clearTimeout(timeout);
          reject(error);
        });
      });
    } else {
      logger.log('‚úÖ Bot j√° est√° pronto!');
    }

    // Executar sincroniza√ß√£o
    logger.log('üîÑ Executando sincroniza√ß√£o de usu√°rios...');
    await syncUsersService.sincronizarTodosUsuarios(client);

    // Gerar relat√≥rio
    logger.log('üìä Gerando relat√≥rio de sincroniza√ß√£o...');
    const stats = await syncUsersService.gerarRelatorioSincronizacao();

    if (stats) {
      logger.log('üìà Relat√≥rio de Sincroniza√ß√£o:');
      logger.log(`   üë• Total de usu√°rios: ${stats.totalUsuarios}`);
      logger.log(`   üéñÔ∏è Com patente: ${stats.usuariosComPatente}`);
      logger.log(`   üÜï Novos (30 dias): ${stats.usuariosRecentes}`);
      logger.log(
        `   üïê √öltima sincroniza√ß√£o: ${stats.ultimaSincronizacao.toLocaleString('pt-BR')}`,
      );
    }

    logger.log('‚úÖ Sincroniza√ß√£o manual conclu√≠da com sucesso!');

    // Fechar a aplica√ß√£o
    await app.close();
    process.exit(0);
  } catch (error) {
    logger.error('‚ùå Erro durante a sincroniza√ß√£o manual:', error);
    process.exit(1);
  }
}

// Executar o script se for chamado diretamente
if (require.main === module) {
  runSync();
}

export { runSync };
